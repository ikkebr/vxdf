import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Target, AlertTriangle, Check, Code } from 'lucide-react';

interface VulnerabilityDetailProps {
  vulnerability: any;
  onClose: () => void;
}

export const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({ 
  vulnerability, 
  onClose 
}) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    'evidence': true,
    'source': false,
    'sink': false,
    'dataflow': false
  });
  
  const toggleSection = (section: string) => {
    setExpandedSections({
      ...expandedSections,
      [section]: !expandedSections[section]
    });
  };
  
  const tabs = [
    { id: 'overview', label: 'Overview' },
    { id: 'evidence', label: 'Evidence' },
    { id: 'dataflow', label: 'Data Flow' },
    { id: 'fix', label: 'Remediation' }
  ];
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-5xl max-h-[90vh] flex flex-col">
        <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
          <div className="flex items-center">
            <AlertTriangle className={`w-5 h-5 mr-2 ${
              vulnerability.severity === 'Critical' ? 'text-red-500' :
              vulnerability.severity === 'High' ? 'text-orange-500' :
              vulnerability.severity === 'Medium' ? 'text-yellow-500' :
              'text-green-500'
            }`} />
            <h2 className="text-xl font-semibold text-gray-900">{vulnerability.title}</h2>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <span className="sr-only">Close</span>
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="border-b border-gray-200">
          <nav className="flex px-6" aria-label="Tabs">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-3 py-4 text-sm font-medium whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'border-b-2 border-blue-500 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
        
        <div className="flex-1 overflow-auto p-6">
          {activeTab === 'overview' && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-50 p-4 rounded-md">
                  <h3 className="text-sm font-medium text-gray-500">Severity</h3>
                  <p className={`mt-1 text-lg font-semibold ${
                    vulnerability.severity === 'Critical' ? 'text-red-600' :
                    vulnerability.severity === 'High' ? 'text-orange-600' :
                    vulnerability.severity === 'Medium' ? 'text-yellow-600' :
                    'text-green-600'
                  }`}>{vulnerability.severity}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-md">
                  <h3 className="text-sm font-medium text-gray-500">Category</h3>
                  <p className="mt-1 text-lg font-semibold text-gray-900">{vulnerability.category}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-md">
                  <h3 className="text-sm font-medium text-gray-500">Status</h3>
                  <p className={`mt-1 flex items-center text-lg font-semibold ${
                    vulnerability.exploitable ? 'text-red-600' : 'text-green-600'
                  }`}>
                    {vulnerability.exploitable ? (
                      <>
                        <AlertTriangle className="w-5 h-5 mr-1" />
                        Exploitable
                      </>
                    ) : (
                      <>
                        <Check className="w-5 h-5 mr-1" />
                        Not Exploitable
                      </>
                    )}
                  </p>
                </div>
                <div className="bg-gray-50 p-4 rounded-md">
                  <h3 className="text-sm font-medium text-gray-500">ID</h3>
                  <p className="mt-1 text-lg font-semibold text-gray-900">{vulnerability.id}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Description</h3>
                <p className="text-gray-700">{vulnerability.evidence}</p>
              </div>
              
              <div>
                <button
                  onClick={() => toggleSection('evidence')}
                  className="flex items-center w-full justify-between bg-blue-50 p-3 rounded-md hover:bg-blue-100 transition-colors"
                >
                  <span className="text-md font-medium text-blue-800">Evidence Summary</span>
                  {expandedSections.evidence ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </button>
                
                {expandedSections.evidence && (
                  <div className="mt-3 bg-gray-50 rounded-md p-4">
                    <p className="text-gray-700">{vulnerability.evidence}</p>
                  </div>
                )}
              </div>
              
              <div>
                <button
                  onClick={() => toggleSection('source')}
                  className="flex items-center w-full justify-between bg-blue-50 p-3 rounded-md hover:bg-blue-100 transition-colors"
                >
                  <span className="text-md font-medium text-blue-800">Vulnerability Source</span>
                  {expandedSections.source ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </button>
                
                {expandedSections.source && (
                  <div className="mt-3 bg-gray-50 rounded-md p-4">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">{vulnerability.source.file}:{vulnerability.source.line}</span>
                      <button className="text-blue-600 text-sm hover:underline">View File</button>
                    </div>
                    <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                      <pre>{vulnerability.source.snippet}</pre>
                    </div>
                  </div>
                )}
              </div>
              
              <div>
                <button
                  onClick={() => toggleSection('sink')}
                  className="flex items-center w-full justify-between bg-blue-50 p-3 rounded-md hover:bg-blue-100 transition-colors"
                >
                  <span className="text-md font-medium text-blue-800">Vulnerability Sink</span>
                  {expandedSections.sink ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
                </button>
                
                {expandedSections.sink && (
                  <div className="mt-3 bg-gray-50 rounded-md p-4">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium text-gray-700">{vulnerability.sink.file}:{vulnerability.sink.line}</span>
                      <button className="text-blue-600 text-sm hover:underline">View File</button>
                    </div>
                    <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                      <pre>{vulnerability.sink.snippet}</pre>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {activeTab === 'evidence' && (
            <div className="space-y-6">
              <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-md">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <AlertTriangle className="h-5 w-5 text-red-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">
                      Exploit Successfully Validated
                    </h3>
                    <div className="mt-2 text-sm text-red-700">
                      <p>
                        The vulnerability was confirmed through dynamic testing. 
                        The following evidence demonstrates exploitability:
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="bg-white shadow overflow-hidden rounded-md">
                <div className="px-4 py-5 sm:px-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    Validation Evidence
                  </h3>
                  <p className="mt-1 max-w-2xl text-sm text-gray-500">
                    Proof of vulnerability exploitation
                  </p>
                </div>
                <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                  <div className="space-y-4">
                    <div className="bg-gray-50 p-4 rounded-md">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-sm font-medium text-gray-900">Dynamic Test</h4>
                        <span className="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                          Primary Evidence
                        </span>
                      </div>
                      <p className="text-sm text-gray-700">{vulnerability.evidence}</p>
                      <div className="mt-3">
                        <h5 className="text-xs font-medium text-gray-500 mb-1">Test Payload</h5>
                        <div className="bg-gray-900 text-gray-100 p-2 rounded-md font-mono text-xs overflow-x-auto">
                          <code>
                            {vulnerability.category === 'SQL Injection' ? "' OR '1'='1" : 
                             vulnerability.category === 'XSS' ? "<script>alert('XSS')</script>" :
                             "Payload content for " + vulnerability.category}
                          </code>
                        </div>
                      </div>
                      <div className="mt-3">
                        <h5 className="text-xs font-medium text-gray-500 mb-1">Response</h5>
                        <div className="bg-gray-900 text-gray-100 p-2 rounded-md font-mono text-xs overflow-x-auto">
                          <code>
                            {vulnerability.category === 'SQL Injection' ? 
                              'HTTP 200 OK\n\n{"authenticated": true, "user": {"id": 1, "username": "admin", "role": "administrator"}}' : 
                              vulnerability.category === 'XSS' ?
                              'HTTP 200 OK\n\nScript executed in victim browser context, allowing session theft.' :
                              'Successful exploitation response for ' + vulnerability.category}
                          </code>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-md">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-sm font-medium text-gray-900">Static Analysis</h4>
                        <span className="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800">
                          Supporting Evidence
                        </span>
                      </div>
                      <p className="text-sm text-gray-700">
                        Static analysis confirms unsanitized data flow from source to sink.
                        No validation or escaping mechanisms were found in the path.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {activeTab === 'dataflow' && (
            <div className="space-y-6">
              <div className="bg-white shadow overflow-hidden rounded-md">
                <div className="px-4 py-5 sm:px-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    Data Flow Trace
                  </h3>
                  <p className="mt-1 max-w-2xl text-sm text-gray-500">
                    Tracing how user input flows to vulnerable sink
                  </p>
                </div>
                <div className="border-t border-gray-200">
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center" aria-hidden="true">
                      <div className="w-0.5 h-full bg-gray-200 mx-auto"></div>
                    </div>
                    <div className="relative">
                      <div className="py-5 px-4 sm:py-6 sm:px-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0">
                            <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center">
                              <Target className="h-5 w-5 text-white" />
                            </span>
                          </div>
                          <div className="ml-4">
                            <h4 className="text-lg font-medium text-gray-900">Source: User Input</h4>
                            <p className="text-sm text-gray-500">{vulnerability.source.file}:{vulnerability.source.line}</p>
                          </div>
                        </div>
                        <div className="mt-3 ml-12">
                          <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                            <pre>{vulnerability.source.snippet}</pre>
                          </div>
                          <p className="mt-2 text-sm text-gray-600">
                            Untrusted data enters the application here. This input is not properly validated or sanitized.
                          </p>
                        </div>
                      </div>
                      
                      <div className="py-5 px-4 sm:py-6 sm:px-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0">
                            <span className="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                              <Code className="h-5 w-5 text-gray-700" />
                            </span>
                          </div>
                          <div className="ml-4">
                            <h4 className="text-lg font-medium text-gray-900">Propagation</h4>
                            <p className="text-sm text-gray-500">Data passes through application</p>
                          </div>
                        </div>
                        <div className="mt-3 ml-12">
                          <p className="text-sm text-gray-600">
                            The untrusted data propagates through the application without proper sanitization.
                            No validation or encoding functions are called on the data.
                          </p>
                        </div>
                      </div>
                      
                      <div className="py-5 px-4 sm:py-6 sm:px-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0">
                            <span className="h-8 w-8 rounded-full bg-red-500 flex items-center justify-center">
                              <AlertTriangle className="h-5 w-5 text-white" />
                            </span>
                          </div>
                          <div className="ml-4">
                            <h4 className="text-lg font-medium text-gray-900">Sink: Vulnerable Operation</h4>
                            <p className="text-sm text-gray-500">{vulnerability.sink.file}:{vulnerability.sink.line}</p>
                          </div>
                        </div>
                        <div className="mt-3 ml-12">
                          <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                            <pre>{vulnerability.sink.snippet}</pre>
                          </div>
                          <p className="mt-2 text-sm text-gray-600">
                            The untrusted data reaches a sensitive operation here without proper sanitization,
                            resulting in a vulnerability that can be exploited.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {activeTab === 'fix' && (
            <div className="space-y-6">
              <div className="bg-white shadow overflow-hidden rounded-md">
                <div className="px-4 py-5 sm:px-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    Remediation Guidance
                  </h3>
                  <p className="mt-1 max-w-2xl text-sm text-gray-500">
                    How to fix this vulnerability
                  </p>
                </div>
                <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                  <h4 className="text-md font-medium text-gray-900 mb-3">Recommended Fix</h4>
                  
                  {vulnerability.category === 'SQL Injection' && (
                    <div className="space-y-4">
                      <p className="text-sm text-gray-700">
                        Use parameterized queries or prepared statements instead of string concatenation.
                        This ensures that user input is treated as data, not executable code.
                      </p>
                      
                      <div className="bg-red-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-red-800 mb-1">Vulnerable Code</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{vulnerability.sink.snippet}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-green-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-green-800 mb-1">Fixed Code</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{`const query = "SELECT * FROM users WHERE username = ?";
connection.query(query, [req.body.username]);`}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-blue-50 p-4 rounded-md">
                        <h5 className="text-sm font-medium text-blue-800 mb-2">Additional Recommendations</h5>
                        <ul className="list-disc pl-5 text-sm text-gray-700 space-y-1">
                          <li>Implement input validation to reject suspicious inputs</li>
                          <li>Apply the principle of least privilege for database users</li>
                          <li>Use an ORM that handles parameterization automatically</li>
                          <li>Consider using a Web Application Firewall as an additional layer of protection</li>
                        </ul>
                      </div>
                    </div>
                  )}
                  
                  {vulnerability.category === 'XSS' && (
                    <div className="space-y-4">
                      <p className="text-sm text-gray-700">
                        Use context-appropriate output encoding when rendering user-supplied content.
                        Consider using a templating library that automatically escapes output.
                      </p>
                      
                      <div className="bg-red-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-red-800 mb-1">Vulnerable Code</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{vulnerability.sink.snippet}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-green-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-green-800 mb-1">Fixed Code</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{`// Using a helper function to escape HTML
div.textContent = userData.bio; // Or
const escapeHtml = (unsafe) => {
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
div.innerHTML = escapeHtml(userData.bio);`}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-blue-50 p-4 rounded-md">
                        <h5 className="text-sm font-medium text-blue-800 mb-2">Additional Recommendations</h5>
                        <ul className="list-disc pl-5 text-sm text-gray-700 space-y-1">
                          <li>Use Content-Security-Policy headers to restrict script execution</li>
                          <li>Consider using libraries like DOMPurify to sanitize HTML</li>
                          <li>Implement input validation to reject potentially malicious content</li>
                          <li>Use frameworks that automatically escape template variables</li>
                        </ul>
                      </div>
                    </div>
                  )}
                  
                  {vulnerability.category !== 'SQL Injection' && vulnerability.category !== 'XSS' && (
                    <div className="space-y-4">
                      <p className="text-sm text-gray-700">
                        Implement proper input validation and sanitization for user-supplied data.
                        Follow the principle of least privilege and use secure APIs.
                      </p>
                      
                      <div className="bg-red-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-red-800 mb-1">Vulnerable Code</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{vulnerability.sink.snippet}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-green-50 p-3 rounded-md">
                        <h5 className="text-sm font-medium text-green-800 mb-1">Recommended Fix</h5>
                        <div className="bg-gray-900 text-gray-100 p-3 rounded-md font-mono text-sm overflow-x-auto">
                          <pre>{`// Implement proper validation and use secure APIs
// Specific fix depends on vulnerability type`}</pre>
                        </div>
                      </div>
                      
                      <div className="bg-blue-50 p-4 rounded-md">
                        <h5 className="text-sm font-medium text-blue-800 mb-2">Additional Recommendations</h5>
                        <ul className="list-disc pl-5 text-sm text-gray-700 space-y-1">
                          <li>Review security best practices for this specific type of vulnerability</li>
                          <li>Implement defense in depth with multiple security controls</li>
                          <li>Consider using security-focused libraries and frameworks</li>
                          <li>Conduct regular security testing to validate fixes</li>
                        </ul>
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="flex items-center justify-center">
                <button className="px-4 py-2 bg-blue-600 text-white rounded-md flex items-center hover:bg-blue-700 transition-colors">
                  <span>Generate Fix Ticket</span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};